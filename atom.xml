<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>H.Ekko</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huangashz.github.io/"/>
  <updated>2016-12-27T12:55:56.000Z</updated>
  <id>https://huangashz.github.io/</id>
  
  <author>
    <name>H.Ekko</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS Crash分析</title>
    <link href="https://huangashz.github.io/2016/12/27/crash/"/>
    <id>https://huangashz.github.io/2016/12/27/crash/</id>
    <published>2016-12-27T12:23:54.000Z</published>
    <updated>2016-12-27T12:55:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在iOS开发中，Crash无疑是App的致命杀手。作为一个严谨的iOS 开发人员来说，写出优秀的健硕的无Crash代码至关重要。但是随着工程代码量的提升，功能的迭代，以及协作开发的模式，难免会有Crash的发生。在发生Crash时，我们应迅速定位问题，解决问题，将Crash几率降到最低。<a id="more"></a></p>
</blockquote>
<h2 id="1-Crash-收集"><a href="#1-Crash-收集" class="headerlink" title="1 Crash 收集"></a>1 Crash 收集</h2><p>当程序运行发生Crash的时候，系统会把运行的最后时刻的程序运行记录保存下来，存储到一个.crash文件中，也就是我们常说的Crash日志。</p>
<p>一、  在开发中，最常遇到的Crash就是Debug状态下了，此时我们是幸运的，因为这个bug我们自己最先知道，我们可以在别人发现它之前把它改好。而且，Xcode 会提供给我们最明确的Crash信息，直接定位到Crash 的那行代码，并会打印出Crash Reason 及调用栈信息。</p>
<p>二、如果我们运气稍差一些，在开发中自测App没有发现任何Crash问题，但是测试童鞋或者其他部门的童鞋在测试使用中发现了Crash，但愿不要被老板发现o(╯□╰)o。无论此时的crash是必现还是非必现，我们都可以拿到测试童鞋的Crash设备，拿到设备导出Crash日志吧~</p>
<p>三、最难过的，无疑是自测没发现，测试童鞋也没发现，但是群众的眼睛的雪亮的，我们亲爱用户遇到了这个棘手的Crash，这极差的用户体验很有可能让用户粉转黑，怎么办？做一个Crash收集器势在必行！！！~</p>
<p>  关于Crash收集的框架，已经有比较成熟的开源框架,<a href="https://github.com/kstenerud/KSCrash" target="_blank" rel="external">KSCrash</a>、<a href="https://github.com/kaler/CrashKit" target="_blank" rel="external">CrashKit</a>等，也有一些Crash统计产品，如<a href="http://try.crashlytics.com/" target="_blank" rel="external">Crashlytics</a>，<a href="https://www.hockeyapp.net/features/crashreports/" target="_blank" rel="external">Hockeyapp</a>，<a href="http://www.umeng.com/" target="_blank" rel="external">友盟</a>，<a href="https://bugly.qq.com/v2/" target="_blank" rel="external">Bugly</a>等等。</p>
<p>当App发生Crash时要上传Crash日志，之后我们可以通过服务端自己的Crash收集器拿到Crash文件，或者借助第三方服务拿到Crash文件。</p>
<p>##2 Crash 分析<br>拿到了Crash日志，我们该从何入手呢？</p>
<p>Crash日志会提供给我们很多信息，我们要在其中提取出来可以帮我们快速定位问题的信息。</p>
<p>首先我们看到这几行信息，<br><img src="http://upload-images.jianshu.io/upload_images/869239-669e7c69096deaa2.png?imageMogr2/auto-orient/strip" alt="crash log"></p>
<ul>
<li><p>Incident Identifier：崩溃报告的唯一标识符，不同的Crash日志该标示符也不同。</p>
</li>
<li><p>CrashReporter Key：设备标识相对应的唯一键值(并非真正的设备的UDID，苹果为了保护用户隐私iOS6以后已经无法获取)。通常同一个设备上同一版本的App发生Crash时，该值都是一样的。</p>
</li>
<li><p>Hardware Model ：代表发生Crash的设备类型。</p>
</li>
<li><p>Process：代表系统Crash的进程名称，通常都是我们的App的名字, [ ]里面是当时进程的ID。</p>
</li>
<li><p>Path：App的所在路径。</p>
</li>
<li><p>Identifier：我们App的Indentifier，通常为“com.xxx.yyy”，xxx代表公司的域名，yyy代表某一个App标识。</p>
</li>
<li><p>AppVersion：当前App的版本号，由Info.plist中的两个字段组成，CFBundleShortVersionString and CFBundleVersion。</p>
</li>
<li><p>Code Type：当前App的CPU架构。</p>
</li>
<li><p>Parent Process：当前进程的父进程，由于iOS中App通常都是单进程的，一般父进程都是launchd。</p>
</li>
<li><p>Date/Time：发生crash的时间</p>
</li>
<li><p>Launch Time：启动App的时间</p>
</li>
<li><p>OS Version：iOS系统固件版本</p>
</li>
<li><p>Report Version：日志版本</p>
</li>
<li><p>Exception Type： 这个信息非常重要，它就像是这个crash的名字，我们知道了它的名字，解决它还难吗？</p>
</li>
<li><p>Exception Subtype：它就是crash的小名，当它的大名满足不了我们的时候，google它的小名，你一定会有收获！~</p>
</li>
<li><p>Triggered by Thread： 问题发生的thread</p>
</li>
</ul>
<p>我们再来看线程信息，在日志中找到crash thread，问题就发生在这里，</p>
<p><img src="http://upload-images.jianshu.io/upload_images/869239-5de5cfee58b9d623.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="crash thread"></p>
<p>有些情况下，Crashed Thread 的调用栈中会明确的告诉我们是执行到哪个类中哪行代码时发生了问题，这种情况下我们很容易判断问题原因以及修改问题。但是大多数情况下，调用栈里显示我们Crash在了一个系统的库里，我们看不到代码，所以没办法确定是哪里的操作造成了问题，于是，我们需要做点事情，将crash日志文件符号化。</p>
<p>为了解析crash日志，我们需要三个东西：</p>
<blockquote>
<p>1.crash文件</p>
<p>2.符号文件：.dsymb格式</p>
<p>3.应用程序文件：.app格式</p>
</blockquote>
<p>然后我们需要把这三个文件放到同一目录下，用atos命令来符号化crash日志的某一行：</p>
<p>打开终端，输入</p>
<p><code>xcrun atos -o appName.app/appName -arch armv7</code></p>
<p>然后再输入你要符号化的那一行后面的调用栈地址，例如：<br><code>xcrun atos -o appName.app/appName -arch armv7 0x000000018a650b38</code></p>
<p>这样就可以得到结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/869239-5448c84e59fa1e89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="crash line"></p>
<p>就能够定位到具体是代码的哪一行发生了问题。</p>
<p><a href="http://wufawei.com/2014/03/symbolicating-ios-crash-logs/" target="_blank" rel="external">更多符号化crash文件的方法</a>。</p>
<p>##3 Crash 处理</p>
<blockquote>
<h3 id="Watchdog-timeout"><a href="#Watchdog-timeout" class="headerlink" title="Watchdog timeout"></a>Watchdog timeout</h3></blockquote>
<p><code>Exception Code：0x8badf00d</code></p>
<p>可以读作“eat bad food”，我吃了坏东西，不能继续为你工作了。是不是很形象？</p>
<p>当我们的App 在启动、退出、或者在响应系统事件的时候等待了太长时间，系统会直接杀死进程。Its Not A Crash~</p>
<p>我们应该查看App是否在主线程请求了网络，或者其他耗时的事情卡住了正常初始化流程。</p>
<p>通常系统允许一个App从启动到可以相应用户事件的时间最多为5S，如果超过了5S，App就会被系统终止掉。在Launch，resume，suspend，quit时都会有相应的时间要求。在Highlight Thread里面我们可以看到被终止时调用到的位置，xxxAppDelegate加上行号。</p>
<p>PS. 在连接Xcode调试时为了便于调试，系统会暂时禁用掉Watchdog，所以此类问题的发现需要使用正常的启动模式。</p>
<blockquote>
<p>###用户强制退出</p>
</blockquote>
<p><code>Exception Codes: 0xdeadfa11, deadfall</code></p>
<p>与正常退出杀死App不同，这种情况可能是用户强制关机或系统强制关机等造成。</p>
<blockquote>
<p>###低内存闪退</p>
</blockquote>
<p>当系统发生低内存闪退时，很有可能我们拿不到任何的Crash信息日志，但App的的确确是闪退了。好好做下检讨吧，是不是哪里有内存泄露？用工具好好测试下。</p>
<p>如果我们能够拿到日志，会发现它和一般的Crash日志不太一样，通常有<code>Free pages</code>，<code>Wired Pages</code>，<code>Purgeable pages</code>，<code>largest process</code> 组成，同时会列出当前系统调用栈信息。</p>
<p>如果我们用的是<code>MRC</code>，首先静态分析一下，是不是哪里忘记了<code>release</code> ？ <code>dealloc</code> 写的是否正确？ 然后使用Instruments检查下内存使用情况，看看哪里的内存占用较高？是否内存泄露？通常大量的图片不能及时释放内存空间的时候会使内存占用飚升。</p>
<p>内存警告通常在我们debug的时候就会发现，及时的清理掉不用的内存，否则内存占用越来越高，超过系统限制就会被系统杀死。</p>
<blockquote>
<h3 id="Crash-due-to-bugs"><a href="#Crash-due-to-bugs" class="headerlink" title="Crash due to bugs"></a>Crash due to bugs</h3></blockquote>
<p>因为程序bug导致的Crash通常千奇百怪，很难一概而论。大部分情况通过Crash日志就可以定位出问题，当然也不排除部分疑难杂症看半天都不值问题出在哪儿。这个就只能看功底了，一点点找，总是能发现蛛丝马迹。是在看不出来时还可以求助于Google大神，总有人遇到和你一样的Bug</p>
<blockquote>
<h3 id="Exception-Type"><a href="#Exception-Type" class="headerlink" title="Exception Type"></a>Exception Type</h3></blockquote>
<p>1）EXC_BAD_ACCESS<br>此类型的Excpetion是我们最长碰到的Crash，通常用于访问了不改访问的内存导致。一般EXC_BAD_ACCESS后面的”()”还会带有补充信息。</p>
<ul>
<li><p>SIGSEGV<br>通常由于重复释放对象导致，这种类型在切换了ARC以后应该已经很少见到了。</p>
</li>
<li><p>SIGABRT:<br>收到Abort信号退出，通常Foundation库中的容器为了保护状态正常会做一些检测，例如插入nil到数组中等会遇到此类错误。</p>
</li>
<li><p>SEGV:Segmentation  Violation<br>代表无效内存地址，比如空指针，未初始化指针，栈溢出等；</p>
</li>
<li><p>SIGBUS：<br>总线错误，与 SIGSEGV 不同的是，SIGSEGV 访问的是无效地址，而 SIGBUS 访问的是有效地址，但总线访问异常(如地址对齐问题)</p>
</li>
<li><p>SIGILL：<br>尝试执行非法的指令，可能不被识别或者没有权限</p>
</li>
</ul>
<p>2）EXC_BAD_INSTRUCTION</p>
<p>此类异常通常由于线程执行非法指令导致。</p>
<ul>
<li><p>在代码中修改了storyboard与outlet的对应关系，但是storyboard没有更新时发生过此crash。</p>
</li>
<li><p>与第三方库中方法冲突时发生过此crash。</p>
</li>
<li><p>调用系统方法时传入了不恰当的指针类型。</p>
</li>
</ul>
<p>3）EXC_ARITHMETIC</p>
<p>代码中做除法时分母为零了会发生此问题。</p>
<blockquote>
<h3 id="Exception-Code"><a href="#Exception-Code" class="headerlink" title="Exception Code"></a>Exception Code</h3></blockquote>
<ul>
<li><p>0xbaaaaaad此种类型的log意味着该Crash log并非一个真正的Crash，它仅仅只是包含了整个系统某一时刻的运行状态。通常可以通过同时按Home键和音量键，可能由于用户不小心触发</p>
</li>
<li><p>0xbad22222当VOIP程序在后台太过频繁的激活时，系统可能会终止此类程序</p>
</li>
<li><p>0x8badf00d这个前面已经介绍了，程序启动或者恢复时间过长被watch dog终止</p>
</li>
<li><p>0xc00010ff程序执行大量耗费CPU和GPU的运算，导致设备过热，触发系统过热保护被系统终止</p>
</li>
<li><p>0xdead10cc程序退到后台时还占用系统资源，如通讯录被系统终止</p>
</li>
<li><p>0xdeadfa11前面也提到过，程序无响应用户强制关闭</p>
<p>  <a href="https://en.wikipedia.org/wiki/Hexspeak" target="_blank" rel="external">更多开发中遇到的错误码</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在iOS开发中，Crash无疑是App的致命杀手。作为一个严谨的iOS 开发人员来说，写出优秀的健硕的无Crash代码至关重要。但是随着工程代码量的提升，功能的迭代，以及协作开发的模式，难免会有Crash的发生。在发生Crash时，我们应迅速定位问题，解决问题，将Crash几率降到最低。
    
    </summary>
    
    
      <category term="学习" scheme="https://huangashz.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="iOS" scheme="https://huangashz.github.io/tags/iOS/"/>
    
      <category term="objective-C" scheme="https://huangashz.github.io/tags/objective-C/"/>
    
      <category term="开发" scheme="https://huangashz.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>这是一篇新的post</title>
    <link href="https://huangashz.github.io/2016/12/27/newpost-test/"/>
    <id>https://huangashz.github.io/2016/12/27/newpost-test/</id>
    <published>2016-12-27T06:45:41.000Z</published>
    <updated>2016-12-27T09:54:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="title"><a href="#title" class="headerlink" title="title"></a>title</h2><pre><code>这是一篇有关于生活的post。
</code></pre><a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;title&quot;&gt;&lt;a href=&quot;#title&quot; class=&quot;headerlink&quot; title=&quot;title&quot;&gt;&lt;/a&gt;title&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;这是一篇有关于生活的post。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Testing" scheme="https://huangashz.github.io/tags/Testing/"/>
    
      <category term="Another Tag" scheme="https://huangashz.github.io/tags/Another-Tag/"/>
    
  </entry>
  
  <entry>
    <title>iOS 关于设备唯一标识</title>
    <link href="https://huangashz.github.io/2016/10/21/UniqueIdentifier/"/>
    <id>https://huangashz.github.io/2016/10/21/UniqueIdentifier/</id>
    <published>2016-10-21T10:39:41.000Z</published>
    <updated>2016-12-27T12:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UDID-Unique-Device-Identifier"><a href="#UDID-Unique-Device-Identifier" class="headerlink" title="UDID (Unique Device Identifier)"></a>UDID (Unique Device Identifier)</h2><p>iOS 2.0以后UIDevice提供一个获取设备唯一标识符的方法uniqueIdentifier，也就是UDID。</p>
<pre><code>[UIDevice uniqueIdentifier];
</code></pre><p>这个方法在iOS 5的时候已经被遗弃了，iOS 7中已经完全的禁用了它。Xcode5甚至不会允许你编译包含了指引到<code>-[UIDevice uniqueIdentifier]</code>的App。<br><a id="more"></a></p>
<h2 id="MAC-Address"><a href="#MAC-Address" class="headerlink" title="MAC Address"></a>MAC Address</h2><p>  到了iOS 6大家都使用MAC地址来作为设备唯一标识。用来表示互联网上每一个站点的标识符，采用十六进制数表示，共六个字节（48位）。其中，前三个字节是由IEEE的注册管理机构</p>
<p>RA负责给不同厂家分配的代码(高位24位)，也称为“编制上唯一的标识符” （Organizationally Unique Identifier)，后三个字节(低位24位)由各厂家自行指派给生产的适配器接口，称为扩展标识符（唯一性）。</p>
<p>MAC地址在网络上用来区分设备的唯一性，接入网络的设备都有一个MAC地址，他们肯定都是不同的，是唯一的。一部iPhone上可能有多个MAC地址，包括WIFI的、SIM的等，但是iTouch和iPad上就有一个WIFI的，因此只需获取WIFI的MAC地址就好了，也就是en0的地址。</p>
<p>MAC地址就如同我们身份证上的身份证号码，具有全球唯一性。这样就可以非常好的标识设备唯一性，类似与苹果设备的UDID号，通常的用途有：1）用于一些统计与分析目的，利用用户的操作习惯和数据更好的规划产品；2）作为用户ID来唯一识别用户，可以用游客身份使用app又能在服务器端保存相应的信息，省去用户名、密码等注册过程。</p>
<p>使用Mac地址生成设备的唯一标识主要分三种：</p>
<p>1、直接使用“MAC Address”</p>
<p>2、使用“MD5(MAC Address)”</p>
<p>3、使用“MD5(Mac Address+bundle_id)”获得“机器＋应用”的唯一标识（bundle_id 是应用的唯一标识）</p>
<h2 id="UUID（Universally-Unique-Identifier）"><a href="#UUID（Universally-Unique-Identifier）" class="headerlink" title="UUID（Universally Unique Identifier）"></a>UUID（Universally Unique Identifier）</h2><p>  苹果禁止使用MAC地址，如果请求Mac地址都会返回一个固定值。现在大家都会采用UUID+Keychain的方式来做为设备唯一标识。<br>UUID是Universally Unique Identifier的缩写，中文意思是通用唯一识别码。它是让分布式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。这样，每个人都可以建立不与其它人冲突的 UUID。在此情况下，就不需考虑数据库建立时的名称重复问题。苹果公司建议使用UUID为应用生成唯一标识字符串。<br>开发者可以在应用第一次启动时调用一 次，然后将该串存储起来，替代UDID来使用。但是，<strong>如果用户删除该应用再次安装时，又会生成新的字符串</strong>，所以不能保证唯一识别该设备。使用UUID，就要考虑应用被删除后再重新安装时的处理。一个解决的办法是：UUID一般只生成一次，保存在iOS系统里面，如果应用删除了，重装应用之后它的UUID还是一样的，除非系统重置 。但是不能保证在以后的系统升级后还能用（如果系统保存了该信息就能用）。</p>
<h2 id="IDFA（identifierForIdentifier）"><a href="#IDFA（identifierForIdentifier）" class="headerlink" title="IDFA（identifierForIdentifier）"></a>IDFA（identifierForIdentifier）</h2><p>  广告标示符，适用于对外：例如广告推广，换量等跨应用的用户追踪等。</p>
<p>是iOS 6中另外一个新的方法，提供了一个方法advertisingIdentifier，通过调用该方法会返回一个NSUUID实例，最后可以获得一个UUID，由系统存储着的。不过即使这是由系统存储的，但是有几种情况下，会重新生成广告标示符。如果用户完全重置系统（(设置程序 -&gt; 通用 -&gt; 还原 -&gt; 还原位置与隐私) ，这个广告标示符会重新生成。另外如果用户明确的还原广告(设置程序-&gt; 通用 -&gt; 关于本机 -&gt; 广告 -&gt; 还原广告标示符) ，那么广告标示符也会重新生成。关于广告标示符的还原，有一点需要注意：如果程序在后台运行，此时用户“还原广告标示符”，然后再回到程序中，此时获取广 告标示符并不会立即获得还原后的标示符。必须要终止程序，然后再重新启动程序，才能获得还原后的广告标示符。</p>
<p>在同一个设备上的所有App都会取到相同的值，是苹果专门给各广告提供商用来追踪用户而设的，用户可以在 设置|隐私|广告追踪 里重置此id的值，或限制此id的使用，故此id有可能会取不到值，但好在Apple默认是允许追踪的，而且一般用户都不知道有这么个设置，所以基本上用来监测推广效果，是戳戳有余了。</p>
<p><strong>注意：由于idfa会出现取不到的情况，故绝不可以作为业务分析的主id，来识别用户</strong>。</p>
<pre><code>#import &lt;AdSupport/AdSupport.h&gt;

NSString *adId = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];
</code></pre><h2 id="IDFV（identifierForVendor）"><a href="#IDFV（identifierForVendor）" class="headerlink" title="IDFV（identifierForVendor）"></a>IDFV（identifierForVendor）</h2><p>Vindor标示符，适用于对内：例如分析用户在应用内的行为等。</p>
<p>是给Vendor标识用户用的，每个设备在所属同一个Vender的应用里，都有相同的值。其中的Vender是指应用提供商，但准确点说，是通过BundleID的DNS反转的前两部分进行匹配，如果相同就是同一个Vender，例如对于com.somecompany.appone,com.somecompany.apptwo</p>
<p>这两个BundleID来说，就属于同一个Vender，共享同一个idfv的值。和idfa不同的是，idfv的值是一定能取到的，所以非常适合于作为内部用户行为分析的主id，来标识用户，替代OpenUDID。</p>
<p><strong>注意：如果用户将属于此Vender的所有App卸载，则idfv的值会被重置，即再重装此Vender的App，idfv的值和之前不同。</strong></p>
<pre><code>NSString *idfv = [[[UIDevice currentDevice] identifierForVendor] UUIDString];
</code></pre><h2 id="OPEN-UDID"><a href="#OPEN-UDID" class="headerlink" title="OPEN UDID"></a>OPEN UDID</h2><p>每台iOS设备的OpenUDID是通过第一个带有OpenUDID SDK包的App生成，如果你完全删除全部带有OpenUDID SDK包的App（比如恢复系统等），那么OpenUDID会重新生成，而且和之前的值会不同，相当于新设备；</p>
<p>优点是没有用到MAC地址；不同设备能够获取各自唯一的识别码，保证了唯一性，可以用于以往UDID的相关用途；从代码分析OpenUDID的获取，识别码获取方便并且保存谨慎。缺点是<strong>当将设备上所有使用了OpenUDID方案的应用程序删除，且设备关机重启，xcode彻底清除并重启，重装应用程序去获取OpenUDID，此时OpenUDID变化，与之前不一样了，所有OpenUDID应用卸载后，由UIPasteboard保存的数据即被清除，重装故会重新获取新的OpenUDID。</strong></p>
<p>那么当因为用户干预或者恶意程序，致使UIPasteboard数据清除，从而导致OpenUDID被删除，重装也会获取新的OpenUDID。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;UDID-Unique-Device-Identifier&quot;&gt;&lt;a href=&quot;#UDID-Unique-Device-Identifier&quot; class=&quot;headerlink&quot; title=&quot;UDID (Unique Device Identifier)&quot;&gt;&lt;/a&gt;UDID (Unique Device Identifier)&lt;/h2&gt;&lt;p&gt;iOS 2.0以后UIDevice提供一个获取设备唯一标识符的方法uniqueIdentifier，也就是UDID。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[UIDevice uniqueIdentifier];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个方法在iOS 5的时候已经被遗弃了，iOS 7中已经完全的禁用了它。Xcode5甚至不会允许你编译包含了指引到&lt;code&gt;-[UIDevice uniqueIdentifier]&lt;/code&gt;的App。&lt;br&gt;
    
    </summary>
    
    
      <category term="学习" scheme="https://huangashz.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="iOS" scheme="https://huangashz.github.io/tags/iOS/"/>
    
      <category term="objective-C" scheme="https://huangashz.github.io/tags/objective-C/"/>
    
      <category term="开发" scheme="https://huangashz.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
